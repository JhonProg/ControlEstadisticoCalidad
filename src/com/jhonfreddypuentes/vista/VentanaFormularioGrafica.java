/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.jhonfreddypuentes.vista;

import com.jhonfreddypuentes.cmd.Cmd;
import com.jhonfreddypuentes.constante.Constante;
import com.jhonfreddypuentes.constante.TipoGraficaEnum;
import com.jhonfreddypuentes.dto.Comando;
import com.jhonfreddypuentes.dto.GraficoPorAtributo;
import com.jhonfreddypuentes.dto.GraficoPorVariable;
import com.jhonfreddypuentes.dto.Limite;
import com.jhonfreddypuentes.dto.PuntoFueraLimite;
import com.jhonfreddypuentes.util.DataTransito;
import com.jhonfreddypuentes.util.Excel;
import com.jhonfreddypuentes.util.Util;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.File;
import java.text.DecimalFormat;
import java.util.ArrayList;
import org.apache.poi.ss.usermodel.Sheet;
import java.util.List;
import javax.swing.ButtonGroup;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.apache.poi.ss.usermodel.Workbook;

/**
 *
 * @author Jhon
 */

public class VentanaFormularioGrafica extends javax.swing.JFrame {

    
    private TipoGraficaEnum tipoGrafica;
    private final ButtonGroup buttonGroup;
    private Double mediaConocida;
    
    /**
     * Creates new form VentanaFormularioXBar.
     */
    public VentanaFormularioGrafica() {
        initComponents();
        tipoGrafica = null;
        jLabel_tituloVentana.setText(DataTransito.tituloVentanaRegistroDatos);
        mostrarCamposTamanioMuestra(false);
        mostrarCampoParaMediaConocida(false);
        buttonGroup = new ButtonGroup();
        buttonGroup.add(jRadioButton_NO);
        buttonGroup.add(jRadioButton_SI);
        mediaConocida=null;
    }
    
    

    private void mostrarCamposTamanioMuestra(boolean estado){
        jLabel_tamanio_muestra.setVisible(estado);
        jTextField_tamanio_muestra.setVisible(estado);
        
        //Activar validador para el campo tamanio de muestra solo si esta activo.
        if(estado){
            jTextField_tamanio_muestra.addKeyListener(new KeyAdapter() {
                @Override
                public void keyTyped(KeyEvent e) {
                  char c = e.getKeyChar();
                  if (!((c >= '0') && (c <= '9') || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))) {
                    getToolkit().beep();
                    e.consume();
                  }
                }
            }); 
        }
    }
    
    private void mostrarCampoParaMediaConocida(boolean estado){
        jLabel_mediaConocidaDelProceso.setVisible(estado);
        jTextField_mediaConocidaDelProceso.setVisible(estado);
        
        //Activar validador para el campo tamanio de muestra solo si esta activo.
        if(estado){
            jTextField_mediaConocidaDelProceso.addKeyListener(new KeyAdapter() {
                @Override
                public void keyTyped(KeyEvent e) {
                  char c = e.getKeyChar();
                  if (!((c >= '0') && (c <= '9') || (c == KeyEvent.VK_BACK_SPACE) || 
                       (c == KeyEvent.VK_DELETE) || (c == KeyEvent.VK_COMMA) || (c == KeyEvent.VK_PERIOD) )) {
                    getToolkit().beep();
                    e.consume();
                  }
                }
            }); 
        }
    }
    
    public TipoGraficaEnum getTipoGrafica() {
        return tipoGrafica;
    }

    public void setTipoGrafica(TipoGraficaEnum tipoGrafica) {
        this.tipoGrafica = tipoGrafica;
        if(this.tipoGrafica==TipoGraficaEnum.P || this.tipoGrafica == TipoGraficaEnum.NP || this.tipoGrafica == TipoGraficaEnum.U){
            mostrarCamposTamanioMuestra(true);
        }
    }

    private boolean checkTamanioMuestra(){
        String tamanio = jTextField_tamanio_muestra.getText().trim();
        return tamanio!=null && !tamanio.isEmpty();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel_tituloVentana = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jButton_cargueDatosPorExcel = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton_cargarDatosManual = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel_mediaDe_medias = new javax.swing.JLabel();
        jLabel_mediaDeRangos = new javax.swing.JLabel();
        jLabel_limiteControlSuperior = new javax.swing.JLabel();
        jLabel_limiteControlInferior = new javax.swing.JLabel();
        jLabel_tamanio_muestra = new javax.swing.JLabel();
        jTextField_tamanio_muestra = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel_mediaConocidaDelProceso = new javax.swing.JLabel();
        jTextField_mediaConocidaDelProceso = new javax.swing.JTextField();
        jRadioButton_SI = new javax.swing.JRadioButton();
        jRadioButton_NO = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel_tituloVentana.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel_tituloVentana.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_tituloVentana.setText("Datos para Gr√°fica X barra R");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos"));

        jButton_cargueDatosPorExcel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/jhonfreddypuentes/ico/ico_excel.png"))); // NOI18N
        jButton_cargueDatosPorExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_cargueDatosPorExcelActionPerformed(evt);
            }
        });

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Cargar Datos de Excel");

        jButton_cargarDatosManual.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/jhonfreddypuentes/ico/ico_tabla.png"))); // NOI18N
        jButton_cargarDatosManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_cargarDatosManualActionPerformed(evt);
            }
        });

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Cargar Datos Manual");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                    .addComponent(jButton_cargueDatosPorExcel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                    .addComponent(jButton_cargarDatosManual, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton_cargarDatosManual, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton_cargueDatosPorExcel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Resultados"));

        jLabel6.setText("Media de medias :");

        jLabel7.setText("Media de Rangos :");

        jLabel8.setText("Limite control Superior : ");

        jLabel9.setText("Limite control Inferior :");

        jLabel_mediaDe_medias.setText("0");

        jLabel_mediaDeRangos.setText("0");

        jLabel_limiteControlSuperior.setText("0");

        jLabel_limiteControlInferior.setText("0");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel_mediaDe_medias, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                    .addComponent(jLabel_mediaDeRangos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel_limiteControlSuperior, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel_limiteControlInferior, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel_mediaDe_medias))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel_mediaDeRangos))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel_limiteControlSuperior))
                .addGap(11, 11, 11)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel_limiteControlInferior))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel_tamanio_muestra.setText("Tama√±o de la muestra:");

        jTextField_tamanio_muestra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_tamanio_muestraActionPerformed(evt);
            }
        });

        jLabel1.setText("¬øEs conocida la media del proceso?");

        jLabel_mediaConocidaDelProceso.setText("Valor de la media:");

        jRadioButton_SI.setText("SI");
        jRadioButton_SI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_SIActionPerformed(evt);
            }
        });

        jRadioButton_NO.setText("NO");
        jRadioButton_NO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_NOActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel_tituloVentana, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel_mediaConocidaDelProceso, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel_tamanio_muestra, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField_tamanio_muestra)
                            .addComponent(jTextField_mediaConocidaDelProceso)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jRadioButton_SI)
                                .addGap(18, 18, 18)
                                .addComponent(jRadioButton_NO)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel_tituloVentana)
                .addGap(5, 5, 5)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jRadioButton_SI)
                    .addComponent(jRadioButton_NO))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_mediaConocidaDelProceso)
                    .addComponent(jTextField_mediaConocidaDelProceso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_tamanio_muestra)
                    .addComponent(jTextField_tamanio_muestra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_cargueDatosPorExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_cargueDatosPorExcelActionPerformed
        boolean validacionOK = true;
        boolean validacionMediaConocidad = true;
        
        if((this.tipoGrafica==TipoGraficaEnum.P || this.tipoGrafica==TipoGraficaEnum.NP || 
            this.tipoGrafica==TipoGraficaEnum.U)&& !checkTamanioMuestra()){
            validacionOK = false;
            JOptionPane.showMessageDialog(this, Constante.VALIDACION_TAMANIO_MUESTRA);
        }
        
        if(jRadioButton_SI.isSelected()){
            String mediaConocidaDelProceso = jTextField_mediaConocidaDelProceso.getText();
            validacionMediaConocidad = !(mediaConocidaDelProceso==null || mediaConocidaDelProceso.isEmpty());
        }
        
        if(!validacionMediaConocidad){
            JOptionPane.showMessageDialog(this, Constante.VALIDACION_MEDIA_CONOCIDA);
        }
        
        try{
            if(jRadioButton_SI.isSelected()){
                if(!jTextField_mediaConocidaDelProceso.getText().trim().isEmpty()){
                    mediaConocida = Double.parseDouble(jTextField_mediaConocidaDelProceso.getText().replace(",", "."));
                }
            }
            
            if(validacionOK && validacionMediaConocidad){
                cargarDatosDesdeExcel();
            }
        }catch(Exception e){
            jTextField_mediaConocidaDelProceso.setText("");
            JOptionPane.showMessageDialog(this, Constante.VALIDACION_MEDIA_CONOCIDA_DATO);
        }
        
    }//GEN-LAST:event_jButton_cargueDatosPorExcelActionPerformed

    private void jButton_cargarDatosManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_cargarDatosManualActionPerformed
        
        boolean validacionOK = true;
        boolean validacionMediaConocidad = true;
        
        if(jRadioButton_SI.isSelected()){
            String mediaConocidaDelProceso = jTextField_mediaConocidaDelProceso.getText();
            validacionMediaConocidad = !(mediaConocidaDelProceso==null || mediaConocidaDelProceso.isEmpty());
        }
        
        if(!validacionMediaConocidad){
            JOptionPane.showMessageDialog(this, Constante.VALIDACION_MEDIA_CONOCIDA);
        }
        
        if((this.tipoGrafica==TipoGraficaEnum.P || this.tipoGrafica==TipoGraficaEnum.NP)&& !checkTamanioMuestra()){
            validacionOK = false;
            JOptionPane.showMessageDialog(this, Constante.VALIDACION_TAMANIO_MUESTRA);
        }
        
        try{
            if(jRadioButton_SI.isSelected()){
                if(!jTextField_mediaConocidaDelProceso.getText().trim().isEmpty()){
                    mediaConocida = Double.parseDouble(jTextField_mediaConocidaDelProceso.getText().replace(",", "."));
                }
            }
            
            if(validacionOK && validacionMediaConocidad){
                VentanaIngresoDatosManual ventana = null;

                if(this.tipoGrafica==TipoGraficaEnum.P || this.tipoGrafica==TipoGraficaEnum.NP){
                    int tamMuestra = Integer.valueOf(jTextField_tamanio_muestra.getText());
                    ventana = new VentanaIngresoDatosManual(tamMuestra);
                }else{
                    ventana = new VentanaIngresoDatosManual();
                }            

                ventana.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                ventana.setLocationRelativeTo(null);
                ventana.setTitle(Constante.INGRESO_MANUAL);
                ventana.setTipoGrafica(tipoGrafica);
                ventana.setVisible(true);
            }
            
        }catch(Exception e){
            jTextField_mediaConocidaDelProceso.setText("");
            JOptionPane.showMessageDialog(this, Constante.VALIDACION_MEDIA_CONOCIDA_DATO);
        }
        
    }//GEN-LAST:event_jButton_cargarDatosManualActionPerformed

    private void jTextField_tamanio_muestraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_tamanio_muestraActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_tamanio_muestraActionPerformed

    private void jRadioButton_SIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_SIActionPerformed
        mostrarCampoParaMediaConocida(true);
    }//GEN-LAST:event_jRadioButton_SIActionPerformed

    private void jRadioButton_NOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_NOActionPerformed
        mostrarCampoParaMediaConocida(false);
    }//GEN-LAST:event_jRadioButton_NOActionPerformed

    private void cargarDatosDesdeExcel() {
        Util.print("[INI] - cargarDatosDesdeExcel");
        
        File archivo    = Util.examinarArchivo(Constante._XLSX);
        Double[][] data = null;
                
        if(archivo!=null){
            
            Double limiteControlSuperiorEquisBarra = (double)0;
            Double limiteControlInferiorEquisBarra = (double)0;
            Double limiteControlSuperiorErre       = (double)0;
            Double limiteControlInferiorErre       = (double)0;
            double mediaDeMedias                   = (double)0;
            double mediaDeRangos                   = (double)0;
            double mediaDeDesviaciones             = (double)0;
            List<Double> rangosPorFila             = null;
            List<Double> desviacionPorFila         = null;
            List<Double> mediasAritmeticasPorFila  = null;
            int tamanioMuestra = 0;
            
            try{
                Workbook libroTrabajo   = Excel.getWorkbook(archivo);
                List<String> validacion = null;
                
                if(this.tipoGrafica==TipoGraficaEnum.X_M_R || this.tipoGrafica==TipoGraficaEnum.P || 
                   this.tipoGrafica==TipoGraficaEnum.NP    || this.tipoGrafica==TipoGraficaEnum.C || this.tipoGrafica==TipoGraficaEnum.U){
                    validacion = Excel.validarLibro(libroTrabajo,true);
                }else{
                    validacion = Excel.validarLibro(libroTrabajo,false);
                }
                                
                if(validacion.isEmpty()){
                    
                    data = Excel.getMatrix(libroTrabajo);
                    
                    if(this.tipoGrafica!=TipoGraficaEnum.P && this.tipoGrafica!=TipoGraficaEnum.NP 
                    && this.tipoGrafica!=TipoGraficaEnum.C && this.tipoGrafica!=TipoGraficaEnum.U){
                       
                        mediasAritmeticasPorFila = Util.calcularMediasAritmeticasPorFila(data);
                        rangosPorFila            = Util.calcularRangosPorFila(data);

                        mediaDeMedias       = Util.obtenerMediaDeMedias(mediasAritmeticasPorFila);
                        mediaDeRangos       = Util.obtenerMediaDeRangos(rangosPorFila);

                        Sheet sheet    = libroTrabajo.getSheetAt(0);
                        tamanioMuestra = sheet.getRow(1).getPhysicalNumberOfCells();

                        // Constantes.
                        Double factorA2 = Constante.LISTA_A2.get(tamanioMuestra);
                        Double factorD3 = Constante.LISTA_D3.get(tamanioMuestra);
                        Double factorD4 = Constante.LISTA_D4.get(tamanioMuestra);

                        // Limites.
                        limiteControlSuperiorEquisBarra = mediaDeMedias+factorA2*mediaDeRangos;
                        limiteControlInferiorEquisBarra = mediaDeMedias-factorA2*mediaDeRangos;
                        limiteControlSuperiorErre       = factorD4*mediaDeRangos;
                        limiteControlInferiorErre       = factorD3*mediaDeRangos;

                        // Set resultados...
                        jLabel_mediaDe_medias.setText(String.valueOf(mediaDeMedias));
                        jLabel_mediaDeRangos.setText(String.valueOf(mediaDeRangos));
                        jLabel_limiteControlInferior.setText(String.valueOf(limiteControlInferiorEquisBarra));
                        jLabel_limiteControlSuperior.setText(String.valueOf(limiteControlSuperiorEquisBarra));
                    }
                }else{
                    StringBuilder errores = new StringBuilder();
                    validacion.stream().forEach((mensaje) -> {
                        System.out.println(mensaje);
                        errores.append(mensaje).append("\n");                                
                    });
                    JOptionPane.showMessageDialog(this, errores);
                }
                
            }catch(Exception e){
                JOptionPane.showMessageDialog(this, Constante.ERROR_CARGUE_ARCHIVO);
            }
        
            System.out.println("IF(data!=null) : ["+(data!=null)+"]");
            if(data!=null){
                
                String datos             = "";
                String home_scripts      = Util.getHome()+Constante.SCRIPTS;
                String rutaDelScript     = "";
                String parametros        = "";
                Cmd commandExecutor      = new Cmd();
                String comandoFinal      = "";
                
                GraficoPorVariable graficoPV = null;
                GraficoPorAtributo graficoPA = null;
                boolean graficoPorVariable   = false;
                boolean graficoPorAtributo   = false;
                
                //Graficar equis barra y equis barra r.
                if(this.tipoGrafica==TipoGraficaEnum.X_BARRA_R){
                    List<Double> listaDatos = Util.calcularMediasAritmeticasPorFila(data);
                    datos         = Util.obtenerDatosCsvDesdeLista(listaDatos);
                    String datosR = Util.obtenerDatosCsvDesdeLista(rangosPorFila);
                    
                    System.out.println("MEDIA CALCULADA:"+mediaDeMedias);
                    System.out.println("MEDIA CONOCIDA :"+mediaConocida);
                    //¬øSe conoce la media del proceso?
                    if(mediaConocida!=null){
                        mediaDeMedias = mediaConocida;
                    }
                    
                    parametros = limiteControlInferiorEquisBarra+" "+limiteControlSuperiorEquisBarra+" "+mediaDeMedias+""
                                 + " \""+datos+"\"" +" "+limiteControlInferiorErre+" "+limiteControlSuperiorErre+" "+mediaDeRangos+" "+datosR;

                    rutaDelScript            = home_scripts+Constante.FILE_X_BAR_PY;
                    String comandoFinalXBarR = Util.getHome()+Constante.RUTA_PYTHON27+rutaDelScript+" "+parametros;
                    comandoFinal             = comandoFinalXBarR.replace(Constante.STR_BUILD_CLASES, Constante.STR_EMPTY);
                    
                    graficoPV = new GraficoPorVariable();
                    graficoPorVariable = true;
                    //Tipo.
                    graficoPV.setTipoGrafico(TipoGraficaEnum.X_BARRA_R);
                    
                    //Tama√±o de la muestra.
                    graficoPV.setTamanioMuestra(tamanioMuestra);
                    
                    //Data excel.
                    graficoPV.setData(data);
                    
                    graficoPV.setRangosPorFila(rangosPorFila);
                    
                    //datos.
                    graficoPV.setDatos(Util.obtenerListaDoubleDesdeCsv(datos));
                    graficoPV.setDatosSegundoGrafico(Util.obtenerListaDoubleDesdeCsv(datosR));
                    
                    //limites.
                    Limite limite  = new Limite(limiteControlInferiorEquisBarra,limiteControlSuperiorEquisBarra,mediaDeMedias);
                    Limite limite2 = new Limite(limiteControlInferiorErre, limiteControlSuperiorErre, mediaDeRangos);
                    graficoPV.setLimite(limite);
                    graficoPV.setLimiteSegundoGrafico(limite2);
                    
                    //Comando.
                    Comando comando =  new Comando(parametros, rutaDelScript, comandoFinal);
                    graficoPV.setComando(comando);
                    
                }else if(this.tipoGrafica==TipoGraficaEnum.X_BARRA_S){
                    //Graficar equis barra s
                    Double limiteControlSuperiorS  = (double)0;
                    Double limiteControlInferiorS  = (double)0;
                    Double limiteControlInferiorXS = (double)0;
                    Double limiteControlSuperiorXS = (double)0;
                    
                    List<Double> listaDatos2 = Util.calcularMediasAritmeticasPorFila(data);
                    desviacionPorFila        = Util.calcularDesviacionEstandarPorFila(data,mediasAritmeticasPorFila);
                    mediaDeDesviaciones      = Util.obtenerMediaDeDesviaciones(desviacionPorFila);
                    String datosS            = Util.obtenerDatosCsvDesdeLista(desviacionPorFila);
                    datos                    = Util.obtenerDatosCsvDesdeLista(listaDatos2);         
                                        
                    double B3 = Constante.LISTA_B3.get(tamanioMuestra);
                    double B4 = Constante.LISTA_B4.get(tamanioMuestra);
                    double A3 = Constante.LISTA_A3.get(tamanioMuestra);
                    
                    System.out.println("MEDIA CALCULADA:"+mediaDeMedias);
                    System.out.println("MEDIA CONOCIDA :"+mediaConocida);
                    //¬øSe conoce la media del proceso?
                    if(mediaConocida!=null){
                        mediaDeMedias = mediaConocida;
                    }
                    
                    limiteControlInferiorS  = B3*mediaDeDesviaciones;
                    limiteControlSuperiorS  = B4*mediaDeDesviaciones;
                    limiteControlInferiorXS = mediaDeMedias - A3*mediaDeDesviaciones;
                    limiteControlSuperiorXS = mediaDeMedias + A3*mediaDeDesviaciones;
                    
                    parametros = limiteControlInferiorS+" "+limiteControlSuperiorS+" "+mediaDeDesviaciones+" \""+datosS+"\""
                           + " "+limiteControlInferiorXS+" "+limiteControlSuperiorXS+" "+mediaDeMedias+" "+datos;
                    
                    rutaDelScript = home_scripts+Constante.FILE_X_BAR_S_PY;
                    String comandoFinalXBarS = Util.getHome()+Constante.RUTA_PYTHON27+rutaDelScript+" "+parametros;
                    comandoFinal             = comandoFinalXBarS.replace(Constante.STR_BUILD_CLASES, Constante.STR_EMPTY);
                    
                    graficoPV = new GraficoPorVariable();
                    graficoPorVariable = true;
                    //Tipo.
                    graficoPV.setTipoGrafico(TipoGraficaEnum.X_BARRA_S);
                    
                    //Tama√±o de la muestra.
                    graficoPV.setTamanioMuestra(tamanioMuestra);
                    
                    //Data excel.
                    graficoPV.setData(data);
                    
                    graficoPV.setDesviacionPorFila(desviacionPorFila);
                    
                    //datos.
                    //graficoPV.setDatos(Util.obtenerListaDoubleDesdeCsv(datosS));
                    //graficoPV.setDatosSegundoGrafico(Util.obtenerListaDoubleDesdeCsv(datos));
                    graficoPV.setDatos(Util.obtenerListaDoubleDesdeCsv(datos));
                    graficoPV.setDatosSegundoGrafico(Util.obtenerListaDoubleDesdeCsv(datosS));
                    
                    //limites.
                    //Limite limite  = new Limite(limiteControlInferiorS,limiteControlSuperiorS,mediaDeMedias);
                    //Limite limite2 = new Limite(limiteControlInferiorXS, limiteControlSuperiorXS, mediaDeDesviaciones);
                    Limite limite  = new Limite(limiteControlInferiorXS,limiteControlSuperiorXS,mediaDeMedias);
                    Limite limite2 = new Limite(limiteControlInferiorS, limiteControlSuperiorS, mediaDeDesviaciones);
                    graficoPV.setLimite(limite);
                    graficoPV.setLimiteSegundoGrafico(limite2);
                    
                    //Comando.
                    Comando comando =  new Comando(parametros, rutaDelScript, comandoFinal);
                    graficoPV.setComando(comando);
                    
                }else if(this.tipoGrafica==TipoGraficaEnum.X_M_R){
                    
                    List<Double> datosEnFila    = Util.calcularMediasAritmeticasPorFila(data,true);
                    
                    Double mediaGeneral         = Util.calcularMedia(datosEnFila);
                    List<Double> rangosMoviles  = Util.calcularRangosMoviles(datosEnFila);
                    Double mediaDeRangosMoviles = Util.calcularMedia(rangosMoviles);
                    String datosX               = Util.obtenerDatosCsvDesdeLista(datosEnFila);
                    String datosRM              = Util.obtenerDatosCsvDesdeLista(rangosMoviles);
                    
                    System.out.println("MEDIA CALCULADA:"+mediaGeneral);
                    System.out.println("MEDIA CONOCIDA :"+mediaConocida);
                    //¬øSe conoce la media del proceso?
                    if(mediaConocida!=null){
                        mediaGeneral = mediaConocida;
                    }
                    
                    Double limiteSuperiorParaX = mediaGeneral + 3 * (mediaDeRangosMoviles/1.128);
                    Double limiteInferiorParaX = mediaGeneral - 3 * (mediaDeRangosMoviles/1.128);
                    
                    Double limiteInferiorParaR = (double)0;
                    Double limiteSuperiorParaR = Constante.D4*mediaDeRangosMoviles;
                    
                    parametros = limiteInferiorParaR+" "+limiteSuperiorParaR+" "+mediaDeRangosMoviles+" \""+datosRM+"\""
                           + " "+limiteInferiorParaX+" "+limiteSuperiorParaX+" "+mediaGeneral+" "+datosX;
                    
                    rutaDelScript = home_scripts+Constante.FILE_X_M_R_PY;
                    String comandoFinalXBarS = Util.getHome()+Constante.RUTA_PYTHON27+rutaDelScript+" "+parametros;
                    comandoFinal             = comandoFinalXBarS.replace(Constante.STR_BUILD_CLASES, Constante.STR_EMPTY);
                    
                    graficoPV = new GraficoPorVariable();
                    graficoPorVariable = true;
                    //Tipo.
                    graficoPV.setTipoGrafico(TipoGraficaEnum.X_M_R);
                    
                    //Tama√±o de la muestra.
                    graficoPV.setTamanioMuestra(tamanioMuestra);
                    
                    //Data excel.
                    graficoPV.setData(data);
                    
                    graficoPV.setRangosMoviles(rangosMoviles);
                    
                    //datos.
                    graficoPV.setDatos(Util.obtenerListaDoubleDesdeCsv(datosX));
                    //graficoPV.setDatosSegundoGrafico(Util.obtenerListaDoubleDesdeCsv(datosRM));
                    
                    //limites.
                    Limite limite  = new Limite(limiteInferiorParaX,limiteSuperiorParaX,mediaGeneral);
                    //Limite limite2 = new Limite(limiteInferiorParaR, limiteSuperiorParaR, mediaDeRangosMoviles);
                    graficoPV.setLimite(limite);
                    //graficoPV.setLimiteSegundoGrafico(limite2);
                    
                    //Comando.
                    Comando comando =  new Comando(parametros, rutaDelScript, comandoFinal);
                    graficoPV.setComando(comando);
                    
                    
                }else if(this.tipoGrafica == TipoGraficaEnum.P){
                    String tamanioMuestral = jTextField_tamanio_muestra.getText();
                    
                    if(tamanioMuestral!=null){
                        DecimalFormat df         = new DecimalFormat(Constante.STR_CERO_CERO);
                        int tam                  = Integer.valueOf(tamanioMuestral);
                        List<Double> datosEnFila = Util.getDataUnicaColumna(data);
                        Double sumatoria         = Util.sumarElementos(datosEnFila);
                        
                        int n      = datosEnFila.size();
                        Double mxn =  (double) tam * n;
                        
                        Double pMedia              = sumatoria/mxn;
                        
                        System.out.println("MEDIA CALCULADA:"+pMedia);
                        System.out.println("MEDIA CONOCIDA :"+mediaConocida);
                        //¬øSe conoce la media del proceso?
                        if(mediaConocida!=null){
                            pMedia = mediaConocida;
                        }
                        
                        Double limiteSuperiorParaP = pMedia+3*Math.sqrt((pMedia*(1-pMedia))/tam);
                        Double limiteInferiorParaP = pMedia-3*Math.sqrt((pMedia*(1-pMedia))/tam);
                        String datosP              = Util.obtenerDatosCsvDesdeLista(datosEnFila,tam);
                                                
                        String nuevoLimInf = df.format(limiteInferiorParaP).replace(Constante.STR_COMMA_SEPARATOR, Constante.STR_PUNTO);
                        String nuevoLimSup = df.format(limiteSuperiorParaP).replace(Constante.STR_COMMA_SEPARATOR, Constante.STR_PUNTO);
                        String nuevaPMedia = df.format(pMedia).replace(Constante.STR_COMMA_SEPARATOR, Constante.STR_PUNTO);
                        
                        parametros = nuevoLimInf+" "+nuevoLimSup+" "+nuevaPMedia+" \""+datosP+"\"";
                                            
                        rutaDelScript        = home_scripts+Constante.FILE_P_PY;
                        String comandoFinalP = Util.getHome()+Constante.RUTA_PYTHON27+rutaDelScript+" "+parametros;
                        comandoFinal         = comandoFinalP.replace(Constante.STR_BUILD_CLASES, Constante.STR_EMPTY);
                                                
                        graficoPA = new GraficoPorAtributo();
                        graficoPorAtributo = true;
                        
                        graficoPA.setTipoGrafico(TipoGraficaEnum.P);
                        
                        //Tama√±o de la muestra.
                        graficoPA.setTamanioMuestra(tam);
                        
                        graficoPA.setData(data);
                        
                        List<Double> datoss = Util.obtenerListaDoubleDesdeCsv(datosP);
                        
                        graficoPA.setDatos(datoss);
                        graficoPA.setDatosEntrada(datosEnFila);
                                                
                        graficoPA.setLimite(new Limite(limiteInferiorParaP,limiteSuperiorParaP,pMedia));
                        
                        Comando comando =  new Comando(parametros, rutaDelScript, comandoFinal);
                        
                        graficoPA.setComando(comando);
                        
                    }else{  
                        JOptionPane.showMessageDialog(null, Constante.VALIDACION_TAMANIO_MUESTRA);
                    }
                    
                }else if(this.tipoGrafica == TipoGraficaEnum.NP){
                    String tamanioMuestral = jTextField_tamanio_muestra.getText();
                    
                    if(tamanioMuestral!=null){
                        DecimalFormat df         = new DecimalFormat(Constante.STR_CERO_CERO);
                        int tam                  = Integer.valueOf(tamanioMuestral);
                        List<Double> datosEnFila = Util.getDataUnicaColumna(data);
                        Double sumatoria         = Util.sumarElementos(datosEnFila);
                                                
                        int n         = datosEnFila.size();
                        Double mxn    =  (double) tam * n;
                        Double pMedia = sumatoria/mxn;
                        
                        System.out.println("MEDIA CALCULADA:"+pMedia);
                        System.out.println("MEDIA CONOCIDA :"+mediaConocida);
                        //¬øSe conoce la media del proceso?
                        if(mediaConocida!=null){
                            pMedia = mediaConocida;
                        }
                        
                        Double limiteSuperiorParaP = (tam*pMedia)+(3*Math.sqrt((tam*pMedia*(1-pMedia))));
                        Double limiteInferiorParaP = (tam*pMedia)-(3*Math.sqrt((tam*pMedia*(1-pMedia))));
                        String datosNP              = Util.obtenerDatosCsvDesdeLista(datosEnFila);
                        
                        String nuevoLimInf = df.format(limiteInferiorParaP).replace(Constante.STR_COMMA_SEPARATOR, Constante.STR_PUNTO);
                        String nuevoLimSup = df.format(limiteSuperiorParaP).replace(Constante.STR_COMMA_SEPARATOR, Constante.STR_PUNTO);
                        String nuevaPMedia = df.format(tam*pMedia).replace(Constante.STR_COMMA_SEPARATOR, Constante.STR_PUNTO);
                        
                        parametros = nuevoLimInf+" "+nuevoLimSup+" "+nuevaPMedia+" \""+datosNP+"\"";
                        
                        rutaDelScript        = home_scripts+Constante.FILE_NP_PY;
                        String comandoFinalP = Util.getHome()+Constante.RUTA_PYTHON27+rutaDelScript+" "+parametros;
                        comandoFinal         = comandoFinalP.replace(Constante.STR_BUILD_CLASES, Constante.STR_EMPTY);
                        
                        graficoPA = new GraficoPorAtributo();
                        graficoPorAtributo = true;
                        
                        graficoPA.setTipoGrafico(TipoGraficaEnum.NP);
                        
                        //Tama√±o de la muestra.
                        graficoPA.setTamanioMuestra(tam);
                        
                        graficoPA.setData(data);
                        
                        List<Double> datosNPDouble = Util.obtenerListaDoubleDesdeCsv(datosNP);
                        
                        graficoPA.setDatos(datosNPDouble);
                        graficoPA.setDatosEntrada(datosEnFila);
                                                
                        graficoPA.setLimite(new Limite(limiteInferiorParaP,limiteSuperiorParaP,pMedia));
                        
                        Comando comando =  new Comando(parametros, rutaDelScript, comandoFinal);
                        
                        graficoPA.setComando(comando);
                                                
                    }else{  
                        JOptionPane.showMessageDialog(null, Constante.VALIDACION_TAMANIO_MUESTRA);
                    }
                }else if(this.tipoGrafica == TipoGraficaEnum.C){
                    
                    List<Double> datosEnFila     = Util.getDataUnicaColumna(data);
                    String datosC                = Util.obtenerDatosCsvDesdeLista(datosEnFila);
                    Double sumatoria             = Util.sumarElementos(datosEnFila);
                    Double cBarra                = sumatoria/datosEnFila.size();
                    
                    System.out.println("MEDIA CALCULADA:"+cBarra);
                    System.out.println("MEDIA CONOCIDA :"+mediaConocida);
                    //¬øSe conoce la media del proceso?
                    if(mediaConocida!=null){
                        cBarra = mediaConocida;
                    }
                    
                    Double limiteControlSuperior = cBarra + 3*Math.sqrt(cBarra);
                    Double lineaCentral          = cBarra;
                    Double limiteControlInferior = cBarra - 3*Math.sqrt(cBarra);
                    
                    parametros = limiteControlInferior+" "+limiteControlSuperior+" "+lineaCentral+" \""+datosC+"\"";
                                        
                    rutaDelScript        = home_scripts+Constante.FILE_C_PY;
                    String comandoFinalP = Util.getHome()+Constante.RUTA_PYTHON27+rutaDelScript+" "+parametros;
                    comandoFinal         = comandoFinalP.replace(Constante.STR_BUILD_CLASES, Constante.STR_EMPTY);
                    
                    graficoPA = new GraficoPorAtributo();
                    graficoPorAtributo = true;

                    graficoPA.setTipoGrafico(TipoGraficaEnum.C);

                    graficoPA.setData(data);
                    graficoPA.setDatos(datosEnFila);
                    graficoPA.setDatosEntrada(datosEnFila);

                    graficoPA.setLimite(new Limite(limiteControlInferior,limiteControlSuperior,lineaCentral));

                    Comando comando =  new Comando(parametros, rutaDelScript, comandoFinal);

                    graficoPA.setComando(comando);
                    
                }else if(this.tipoGrafica == TipoGraficaEnum.U){
                    DecimalFormat df = new DecimalFormat(Constante.STR_CERO_CERO);
                    int n = Integer.valueOf(jTextField_tamanio_muestra.getText());
                    List<Double> datosEnFila               = Util.getDataUnicaColumna(data);
                    List<Double> disconformidadesPorUnidad = Util.getDisconformidadesPorUnidad(datosEnFila,n);
                    String datosU                          = Util.obtenerDatosCsvDesdeLista(disconformidadesPorUnidad);
                    Double sumatoria                       = Util.sumarElementos(disconformidadesPorUnidad);
                    Double uBarra                          = sumatoria/disconformidadesPorUnidad.size();
                    
                    System.out.println("MEDIA CALCULADA:"+uBarra);
                    System.out.println("MEDIA CONOCIDA :"+mediaConocida);
                    //¬øSe conoce la media del proceso?
                    if(mediaConocida!=null){
                        uBarra = mediaConocida;
                    }
                    
                    Double limiteControlSuperior = uBarra + 3*Math.sqrt(uBarra/n);
                    Double lineaCentral          = uBarra;
                    Double limiteControlInferior = uBarra - 3*Math.sqrt(uBarra/n);
                    
                    String nuevoLimiteControlSuperior = df.format(limiteControlSuperior).replace(Constante.STR_COMMA_SEPARATOR, Constante.STR_PUNTO);
                    String nuevaLineaCentral          = df.format(lineaCentral).replace(Constante.STR_COMMA_SEPARATOR, Constante.STR_PUNTO);
                    String nuevolimiteControlInferior = df.format(limiteControlInferior).replace(Constante.STR_COMMA_SEPARATOR, Constante.STR_PUNTO);
                    
                    parametros = nuevolimiteControlInferior+" "+nuevoLimiteControlSuperior+" "+nuevaLineaCentral+" \""+datosU+"\"";
                    
                    rutaDelScript        = home_scripts+Constante.FILE_U_PY;
                    String comandoFinalP = Util.getHome()+Constante.RUTA_PYTHON27+rutaDelScript+" "+parametros;
                    comandoFinal         = comandoFinalP.replace(Constante.STR_BUILD_CLASES, Constante.STR_EMPTY);
                                        
                    graficoPA = new GraficoPorAtributo();
                    graficoPorAtributo = true;

                    graficoPA.setTipoGrafico(TipoGraficaEnum.U);

                    graficoPA.setData(data);
                    graficoPA.setDatos(Util.obtenerListaDoubleDesdeCsv(datosU));
                    graficoPA.setDatosEntrada(datosEnFila);
                    graficoPA.setTamanioMuestra(n);

                    graficoPA.setLimite(new Limite(limiteControlInferior,limiteControlSuperior,lineaCentral));

                    Comando comando =  new Comando(parametros, rutaDelScript, comandoFinal);

                    graficoPA.setComando(comando);
                }
                
                //Ejecutar comando.
                try{
                    commandExecutor.ejecutarComandoSinEspera(comandoFinal);
                }catch(Exception e){
                    Util.print(e.getMessage());
                }
                
                //Gestionar Grafico por fases.
                if(graficoPorVariable){
                    gestionarGraficoPorFases(graficoPV);
                }else if(graficoPorAtributo){
                    gestionarGraficoPorFases(graficoPA);
                }
                                
            }else{
                Util.print("Error, la data obtenida para generar las grafcias es nula..");
            }
        }
        Util.print("[FIN] - cargarDatosDesdeExcel");
    }
    
    private void gestionarGraficoPorFases(GraficoPorVariable grafico){
        List<PuntoFueraLimite> puntosFueraPrimerGrafico  = grafico.getPuntosFueraLimite();
        List<PuntoFueraLimite> puntosFueraSegundoGrafico = grafico.getPuntosFueraLimiteSegundoGrafico();
        
        String tipoGraficoPrimerGrafico  = Constante.NO_APLICA;
        String tipoGraficoSegundoGrafico = Constante.NO_APLICA;
        
        if(!puntosFueraPrimerGrafico.isEmpty() || !puntosFueraSegundoGrafico.isEmpty()){
            List<PuntoFueraLimite> puntosFuera = new ArrayList<>();
            
            switch(grafico.getTipoGrafico()){
                case X_BARRA_R:
                    tipoGraficoPrimerGrafico  = Constante.EQUIS;
                    tipoGraficoSegundoGrafico = Constante.ERRE;
                    break;
                case X_BARRA_S:
                    tipoGraficoPrimerGrafico  = Constante.EQUIS;
                    tipoGraficoSegundoGrafico = Constante.ESE;
                    break;
                case X_M_R:
                    tipoGraficoPrimerGrafico  = Constante.EQUIS;
                    tipoGraficoSegundoGrafico = Constante.EME_ERRE;
                    break;
            }
            
            for(PuntoFueraLimite punto : puntosFueraPrimerGrafico){
                System.out.println("ENTRO A PRIMER GARFICO.....");
                punto.setTipoGrafico(tipoGraficoPrimerGrafico);
                puntosFuera.add(punto);
            }
            
            if(grafico.getTipoGrafico()!=TipoGraficaEnum.X_M_R){
                for(PuntoFueraLimite punto : puntosFueraSegundoGrafico){
                    punto.setTipoGrafico(tipoGraficoSegundoGrafico);
                    puntosFuera.add(punto);
                }
            }
           
            mostrarPuntosFueraYEliminar(grafico,puntosFuera);
        }
    }
    
    private void gestionarGraficoPorFases(GraficoPorAtributo grafico){
      System.out.println("INI-gestionarGraficoPorFases(GraficoPorAtributo grafico)");
        List<PuntoFueraLimite> puntosFueraGrafico = grafico.getPuntosFueraLimite();
        
        String tipoGraficoStr  = Constante.NO_APLICA;
        
        if(!puntosFueraGrafico.isEmpty()){
          
          List<PuntoFueraLimite> puntosFuera = new ArrayList<>();
          
          switch(grafico.getTipoGrafico()){
              case P:
                  tipoGraficoStr  = Constante.PE;
                  break;
              case NP:
                  tipoGraficoStr  = Constante.ENE_PE;
                  break;
              case C:
                  tipoGraficoStr  = Constante.SE;
                  break;
              case U:
                  tipoGraficoStr  = Constante.UU;
                  break;
          }
          
          for(PuntoFueraLimite punto : puntosFueraGrafico){
              punto.setTipoGrafico(tipoGraficoStr);
              puntosFuera.add(punto);
          }
          mostrarPuntosFueraYEliminar(grafico,puntosFuera);
        }
    }
    
    private void mostrarPuntosFueraYEliminar(GraficoPorVariable grafico,List<PuntoFueraLimite> puntosMostrar){
        final String mensaje = Constante.MENSAJE_PUNTOS_FUERA_DE_LIMITES.replace("{}", String.valueOf(puntosMostrar.size()));
        final int resultado  = JOptionPane.showConfirmDialog(this,mensaje, Constante.TITLE_PUNTOS_FUERA, JOptionPane.YES_NO_OPTION);
        
        switch(resultado){
            case 0:
                VentanaPuntosFueraDeControl ventanaPuntosFueraDeControl = null;
                ventanaPuntosFueraDeControl = new VentanaPuntosFueraDeControl(grafico,puntosMostrar);
                ventanaPuntosFueraDeControl.setTitle(Constante.TITLE_PUNTOS_FUERA);
                ventanaPuntosFueraDeControl.setResizable(false);
                ventanaPuntosFueraDeControl.setLocationRelativeTo(null);
                ventanaPuntosFueraDeControl.setVisible(true);
                break;
            case 1:
                break;
            case 2:
                break;
        }
    }
    
    private void mostrarPuntosFueraYEliminar(GraficoPorAtributo grafico,List<PuntoFueraLimite> puntosMostrar){
        final String mensaje = Constante.MENSAJE_PUNTOS_FUERA_DE_LIMITES.replace("{}", String.valueOf(puntosMostrar.size()));
        final int resultado  = JOptionPane.showConfirmDialog(this,mensaje, Constante.TITLE_PUNTOS_FUERA, JOptionPane.YES_NO_OPTION);
        
        switch(resultado){
            case 0:
                VentanaPuntosFueraDeControl ventanaPuntosFueraDeControl = null;
                ventanaPuntosFueraDeControl = new VentanaPuntosFueraDeControl(grafico,puntosMostrar);
                ventanaPuntosFueraDeControl.setTitle(Constante.TITLE_PUNTOS_FUERA);
                ventanaPuntosFueraDeControl.setResizable(false);
                ventanaPuntosFueraDeControl.setLocationRelativeTo(null);
                ventanaPuntosFueraDeControl.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                ventanaPuntosFueraDeControl.setVisible(true);
                break;
            case 1:
                break;
            case 2:
                break;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaFormularioGrafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaFormularioGrafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaFormularioGrafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaFormularioGrafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new VentanaFormularioGrafica().setVisible(true);
            }
        });
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButton_cargarDatosManual;
    private javax.swing.JButton jButton_cargueDatosPorExcel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel_limiteControlInferior;
    private javax.swing.JLabel jLabel_limiteControlSuperior;
    private javax.swing.JLabel jLabel_mediaConocidaDelProceso;
    private javax.swing.JLabel jLabel_mediaDeRangos;
    private javax.swing.JLabel jLabel_mediaDe_medias;
    private javax.swing.JLabel jLabel_tamanio_muestra;
    private javax.swing.JLabel jLabel_tituloVentana;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton jRadioButton_NO;
    private javax.swing.JRadioButton jRadioButton_SI;
    private javax.swing.JTextField jTextField_mediaConocidaDelProceso;
    private javax.swing.JTextField jTextField_tamanio_muestra;
    // End of variables declaration//GEN-END:variables
}
