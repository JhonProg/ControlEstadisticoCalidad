/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.jhonfreddypuentes.vista;

import com.jhonfreddypuentes.cmd.Cmd;
import com.jhonfreddypuentes.constante.Constante;
import com.jhonfreddypuentes.constante.TipoGraficaEnum;
import com.jhonfreddypuentes.dto.Comando;
import com.jhonfreddypuentes.dto.GraficoPorAtributo;
import com.jhonfreddypuentes.dto.GraficoPorVariable;
import com.jhonfreddypuentes.dto.Limite;
import com.jhonfreddypuentes.dto.PuntoFueraLimite;
import com.jhonfreddypuentes.util.Util;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jhon
 */
public class VentanaIngresoDatosManual extends javax.swing.JFrame {

    private TipoGraficaEnum tipoGrafica;
    private int tamMuestra;
    private int ene;
    private Double mediaConocida;
    
    /**
     * Creates new form VentanaIngresoDatosManual
     * @param mediaConocida
     */
    public VentanaIngresoDatosManual(Double mediaConocida) {
        initComponents();
        cargarValidadores();
        tipoGrafica = null;
        this.mediaConocida = mediaConocida;
    }
    
    public VentanaIngresoDatosManual(int tamanioMuestra,Double mediaConocida) {
        initComponents();
        tipoGrafica   = null;
        this.tamMuestra = tamanioMuestra;
        jLabel_tamMuestra.setText("Cantidad Muestra");
        jTextField_tamanioMuestra.setText("1");
        jTextField_tamanioMuestra.setEditable(false);
        this.mediaConocida = mediaConocida;
    }

    public TipoGraficaEnum getTipoGrafica() {
        return tipoGrafica;
    }

    public void setTipoGrafica(TipoGraficaEnum tipoGrafica) {
        this.tipoGrafica = tipoGrafica;
        if(tipoGrafica==TipoGraficaEnum.P || tipoGrafica==TipoGraficaEnum.NP || tipoGrafica==TipoGraficaEnum.C){
            jLabel_tamMuestra.setVisible(false);
            jTextField_tamanioMuestra.setVisible(false);
            jTextField_tamanioMuestra.setText("1");
        }
        if(tipoGrafica==TipoGraficaEnum.U ||tipoGrafica==TipoGraficaEnum.C){
            jLabel_cantidad_datos.setText(Constante.CANTIDAD_DE_MUESTRAS);
        }
    }
    
    private void cargarValidadores(){
        /** tam muestra. */
         jTextField_tamanioMuestra.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
              char c = e.getKeyChar();
              if (!((c >= '0') && (c <= '9') || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))) {
                getToolkit().beep();
                e.consume();
              }
            }
          });
         
         /** Cantidad de datos. */
         jTextField_cantidadDatos.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
              char c = e.getKeyChar();
              if (!((c >= '0') && (c <= '9') || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))) {
                getToolkit().beep();
                e.consume();
              }
            }
          });
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel_tamMuestra = new javax.swing.JLabel();
        jTextField_tamanioMuestra = new javax.swing.JTextField();
        jLabel_cantidad_datos = new javax.swing.JLabel();
        jTextField_cantidadDatos = new javax.swing.JTextField();
        jButton_crearTabla = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_tablaIngresoDatos = new javax.swing.JTable();
        jButton_limpiarCampos = new javax.swing.JButton();
        jButton_graficar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Ingreso de datos"));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Parámetros"));

        jLabel_tamMuestra.setText("Tamaño de muestra : *");

        jLabel_cantidad_datos.setText("Cantidad de muestras  :  *");

        jButton_crearTabla.setForeground(new java.awt.Color(0, 102, 255));
        jButton_crearTabla.setText("Crear Tabla");
        jButton_crearTabla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_crearTablaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel_tamMuestra)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField_tamanioMuestra, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel_cantidad_datos)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField_cantidadDatos, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(182, 182, 182)
                        .addComponent(jButton_crearTabla)))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_tamMuestra)
                    .addComponent(jTextField_tamanioMuestra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_cantidad_datos)
                    .addComponent(jTextField_cantidadDatos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton_crearTabla)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Tabla de datos"));

        jTable_tablaIngresoDatos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable_tablaIngresoDatos);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
        );

        jButton_limpiarCampos.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton_limpiarCampos.setForeground(new java.awt.Color(255, 51, 51));
        jButton_limpiarCampos.setText("Limpiar campos");
        jButton_limpiarCampos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_limpiarCamposActionPerformed(evt);
            }
        });

        jButton_graficar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton_graficar.setForeground(new java.awt.Color(0, 102, 255));
        jButton_graficar.setText("GRAFICAR");
        jButton_graficar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_graficarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton_limpiarCampos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton_graficar)
                .addGap(161, 161, 161))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_limpiarCampos)
                    .addComponent(jButton_graficar))
                .addGap(18, 18, 18))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_crearTablaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_crearTablaActionPerformed
        
        Integer _tamMuestra = 0;
        Integer cantDatos   = 0;
        
        String tamanioMuestra = "";
        if(tipoGrafica==TipoGraficaEnum.U){
            tamanioMuestra = "1";
            ene = Integer.parseInt(jTextField_tamanioMuestra.getText().trim());
        }else{
            tamanioMuestra = jTextField_tamanioMuestra.getText().trim();
        }
        String cantidadDatos  = jTextField_cantidadDatos.getText().trim();
        
        try{
            _tamMuestra = Integer.parseInt(tamanioMuestra);
            cantDatos  = Integer.parseInt(cantidadDatos);
            DefaultTableModel modeloTable = new DefaultTableModel(cantDatos, _tamMuestra);
            jTable_tablaIngresoDatos.setModel(modeloTable);
        }catch(Exception e){
            jTextField_tamanioMuestra.setText("");
            jTextField_cantidadDatos.setText("");
        }
             
    }//GEN-LAST:event_jButton_crearTablaActionPerformed

    private void jButton_limpiarCamposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_limpiarCamposActionPerformed
        limpiarCampos();
    }//GEN-LAST:event_jButton_limpiarCamposActionPerformed

    private void limpiarCampos(){
        jTextField_tamanioMuestra.setText("");
        jTextField_cantidadDatos.setText("");
        DefaultTableModel modeloTable = new DefaultTableModel(0, 0);
        jTable_tablaIngresoDatos.setModel(modeloTable);
    }
    
    private void jButton_graficarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_graficarActionPerformed
        gestionarData();
    }//GEN-LAST:event_jButton_graficarActionPerformed

    private void gestionarData(){
        try{
            Double data[][] = Util.obtenerDatosDesdeTabla(jTable_tablaIngresoDatos);
                        
            Double limiteControlSuperiorEquisBarra = (double)0;
            Double limiteControlInferiorEquisBarra = (double)0;
            Double limiteControlSuperiorErre       = (double)0;
            Double limiteControlInferiorErre       = (double)0;
            double mediaDeMedias                   = (double)0;
            double mediaDeRangos                   = (double)0;
            double mediaDeDesviaciones             = (double)0;

            List<Double> mediasAritmeticasPorFila = null;
            List<Double> rangosPorFila            = null;
            List<Double> desviacionPorFila        = null;
            
            GraficoPorVariable graficoPV = null;
            GraficoPorAtributo graficoPA = null;
            boolean graficoPorVariable   = false;
            boolean graficoPorAtributo   = false;
            
            Integer tamanioMuestra   = Integer.parseInt(jTextField_tamanioMuestra.getText().trim());
            
            if(this.tipoGrafica!=TipoGraficaEnum.P && this.tipoGrafica!=TipoGraficaEnum.NP &&
               this.tipoGrafica!=TipoGraficaEnum.C){

                mediasAritmeticasPorFila = Util.calcularMediasAritmeticasPorFila(data);
                rangosPorFila            = Util.calcularRangosPorFila(data);
                desviacionPorFila        = null;

                mediaDeMedias = Util.obtenerMediaDeMedias(mediasAritmeticasPorFila);
                mediaDeRangos = Util.obtenerMediaDeRangos(rangosPorFila);

                /** Uso de media del proceso si es conocida. */
                if(this.mediaConocida!=null){
                    mediaDeMedias = this.mediaConocida;
                }

                Double factorA2 = Constante.LISTA_A2.get(tamanioMuestra);
                Double factorD3 = Constante.LISTA_D3.get(tamanioMuestra);
                Double factorD4 = Constante.LISTA_D4.get(tamanioMuestra);

                limiteControlSuperiorEquisBarra = mediaDeMedias+factorA2*mediaDeRangos;
                limiteControlInferiorEquisBarra = mediaDeMedias-factorA2*mediaDeRangos;
                limiteControlSuperiorErre       = factorD4*mediaDeRangos;
                limiteControlInferiorErre       = factorD3*mediaDeRangos;
            }
            
            if(data!=null){
                
                List<Double> listaDatos = Util.calcularMediasAritmeticasPorFila(data);
                String datos            = "";
                String home_scripts     = Util.getHome()+Constante.SCRIPTS;
                String rutaDelScript    = "";
                String parametros       = "";
                Cmd commandExecutor     = new Cmd();
                String comandoFinal     = "";
                                
                //Graficar equis barra y equis barra r.
                if(this.tipoGrafica==TipoGraficaEnum.X_BARRA_R){
                    
                    datos         = Util.obtenerDatosCsvDesdeLista(listaDatos);
                    String datosR = Util.obtenerDatosCsvDesdeLista(rangosPorFila);
                    
                    parametros = limiteControlInferiorEquisBarra+" "+limiteControlSuperiorEquisBarra+" "+mediaDeMedias+""
                                 + " \""+datos+"\"" +" "+limiteControlInferiorErre+" "+limiteControlSuperiorErre+" "+mediaDeRangos+" "+datosR;

                    rutaDelScript            = home_scripts+Constante.FILE_X_BAR_PY;
                    String comandoFinalXBarR = Util.getHome()+Constante.RUTA_PYTHON27+rutaDelScript+" "+parametros;
                    comandoFinal             = comandoFinalXBarR.replace(Constante.STR_BUILD_CLASES, Constante.STR_EMPTY);

                    graficoPV = new GraficoPorVariable();
                    graficoPV.setMediaConocida(mediaConocida);
                    graficoPorVariable = true;
                    //Tipo.
                    graficoPV.setTipoGrafico(TipoGraficaEnum.X_BARRA_R);
                    
                    //Tamaño de la muestra.
                    graficoPV.setTamanioMuestra(tamanioMuestra);
                    
                    //Data excel.
                    graficoPV.setData(data);
                    
                    graficoPV.setRangosPorFila(rangosPorFila);
                    
                    //datos.
                    graficoPV.setDatos(Util.obtenerListaDoubleDesdeCsv(datos));
                    graficoPV.setDatosSegundoGrafico(Util.obtenerListaDoubleDesdeCsv(datosR));
                    
                    //limites.
                    Limite limite  = new Limite(limiteControlInferiorEquisBarra,limiteControlSuperiorEquisBarra,mediaDeMedias);
                    Limite limite2 = new Limite(limiteControlInferiorErre, limiteControlSuperiorErre, mediaDeRangos);
                    graficoPV.setLimite(limite);
                    graficoPV.setLimiteSegundoGrafico(limite2);
                    
                    //Comando.
                    Comando comando =  new Comando(parametros, rutaDelScript, comandoFinal);
                    graficoPV.setComando(comando);
                    
                }else if(this.tipoGrafica==TipoGraficaEnum.X_BARRA_S){
                    //Graficar equis barra s
                    Double limiteControlSuperiorS  = (double)0;
                    Double limiteControlInferiorS  = (double)0;
                    Double limiteControlInferiorXS = (double)0;
                    Double limiteControlSuperiorXS = (double)0;
                    
                    List<Double> listaDatos2 = Util.calcularMediasAritmeticasPorFila(data);
                    desviacionPorFila   = Util.calcularDesviacionEstandarPorFila(data,mediasAritmeticasPorFila);
                    mediaDeDesviaciones = Util.obtenerMediaDeDesviaciones(desviacionPorFila);
                    datos               = Util.obtenerDatosCsvDesdeLista(desviacionPorFila);
                    String datosS       = Util.obtenerDatosCsvDesdeLista(listaDatos2);

                    double B3 = Constante.LISTA_B3.get(tamanioMuestra);
                    double B4 = Constante.LISTA_B4.get(tamanioMuestra);
                    double A3 = Constante.LISTA_A3.get(tamanioMuestra);

                    limiteControlInferiorS  = B3*mediaDeDesviaciones;
                    limiteControlSuperiorS  = B4*mediaDeDesviaciones;
                    limiteControlInferiorXS = mediaDeMedias - A3*mediaDeDesviaciones;
                    limiteControlSuperiorXS = mediaDeMedias + A3*mediaDeDesviaciones;
                    
                    parametros = limiteControlInferiorS+" "+limiteControlSuperiorS+" "+mediaDeDesviaciones+" \""+datos+"\""
                           + " "+limiteControlInferiorXS+" "+limiteControlSuperiorXS+" "+mediaDeMedias+" "+datosS;
                    
                    rutaDelScript = home_scripts+Constante.FILE_X_BAR_S_PY;
                    String comandoFinalXBarS = Util.getHome()+Constante.RUTA_PYTHON27+rutaDelScript+" "+parametros;
                    comandoFinal             = comandoFinalXBarS.replace(Constante.STR_BUILD_CLASES, Constante.STR_EMPTY);
                    
                    graficoPV = new GraficoPorVariable();
                    graficoPV.setMediaConocida(mediaConocida);
                    graficoPorVariable = true;
                    //Tipo.
                    graficoPV.setTipoGrafico(TipoGraficaEnum.X_BARRA_S);
                    
                    //Tamaño de la muestra.
                    graficoPV.setTamanioMuestra(tamanioMuestra);
                    
                    //Data excel.
                    graficoPV.setData(data);
                    
                    graficoPV.setDesviacionPorFila(desviacionPorFila);
                    
                    graficoPV.setDatos(Util.obtenerListaDoubleDesdeCsv(datos));
                    graficoPV.setDatosSegundoGrafico(Util.obtenerListaDoubleDesdeCsv(datosS));
                    
                    Limite limite  = new Limite(limiteControlInferiorXS,limiteControlSuperiorXS,mediaDeMedias);
                    Limite limite2 = new Limite(limiteControlInferiorS, limiteControlSuperiorS, mediaDeDesviaciones);
                    graficoPV.setLimite(limite);
                    graficoPV.setLimiteSegundoGrafico(limite2);
                    
                    //Comando.
                    Comando comando =  new Comando(parametros, rutaDelScript, comandoFinal);
                    graficoPV.setComando(comando);
                    
                }else if(this.tipoGrafica==TipoGraficaEnum.X_M_R){
                    
                    List<Double> datosEnFila    = Util.getDataUnicaColumna(data);
                    Double mediaGeneral         = Util.calcularMedia(datosEnFila);
                    List<Double> rangosMoviles  = Util.calcularRangosMoviles(datosEnFila); 
                    Double mediaDeRangosMoviles = Util.calcularMedia(rangosMoviles);
                    String datosX               = Util.obtenerDatosCsvDesdeLista(datosEnFila);
                    String datosRM              = Util.obtenerDatosCsvDesdeLista(rangosMoviles);
                    
                    /** Uso de media del proceso si es conocida. */
                    if(this.mediaConocida!=null){
                        mediaGeneral = this.mediaConocida;
                    }
                    
                    Double limiteSuperiorParaX = mediaGeneral + 3 * (mediaDeRangosMoviles/1.128);
                    Double limiteInferiorParaX = mediaGeneral - 3 * (mediaDeRangosMoviles/1.128);
                    
                    Double limiteInferiorParaR = (double)0;
                    Double limiteSuperiorParaR = Constante.D4*mediaDeRangosMoviles;
                    
                    parametros = limiteInferiorParaR+" "+limiteSuperiorParaR+" "+mediaDeRangosMoviles+" \""+datosRM+"\""
                           + " "+limiteInferiorParaX+" "+limiteSuperiorParaX+" "+mediaGeneral+" "+datosX;
                    
                    rutaDelScript = home_scripts+Constante.FILE_X_M_R_PY;
                    String comandoFinalXBarS = Util.getHome()+Constante.RUTA_PYTHON27+rutaDelScript+" "+parametros;
                    comandoFinal             = comandoFinalXBarS.replace(Constante.STR_BUILD_CLASES, Constante.STR_EMPTY);
                    
                    graficoPV = new GraficoPorVariable();
                    graficoPV.setMediaConocida(mediaConocida);
                    graficoPorVariable = true;
                    //Tipo.
                    graficoPV.setTipoGrafico(TipoGraficaEnum.X_M_R);
                    
                    //Tamaño de la muestra.
                    graficoPV.setTamanioMuestra(tamanioMuestra);
                    
                    //Data excel.
                    graficoPV.setData(data);
                    
                    graficoPV.setRangosMoviles(rangosMoviles);
                    
                    //datos.
                    graficoPV.setDatos(Util.obtenerListaDoubleDesdeCsv(datosX));
                    
                    //limites.
                    Limite limite  = new Limite(limiteInferiorParaX,limiteSuperiorParaX,mediaGeneral);
                    graficoPV.setLimite(limite);
                    
                    //Comando.
                    Comando comando =  new Comando(parametros, rutaDelScript, comandoFinal);
                    graficoPV.setComando(comando);
                    
                }else if(this.tipoGrafica == TipoGraficaEnum.P){
                    String tamanioMuestral = String.valueOf(this.tamMuestra);
                    
                    if(tamanioMuestral!=null){
                        DecimalFormat df = new DecimalFormat("0.00");
                        int tam    = Integer.valueOf(tamanioMuestral);
                        List<Double> datosEnFila = Util.getDataUnicaColumna(data);
                        Double sumatoria = Util.sumarElementos(datosEnFila);
                        int n = datosEnFila.size();
                        Double mxn =  (double) tam * n;
                        Double division = sumatoria/mxn;
                        Double pMedia   = division;
                        
                        /** Uso de media del proceso si es conocida. */
                        if(this.mediaConocida!=null){
                            pMedia = this.mediaConocida;
                        }
                        
                        Double limiteSuperiorParaP = pMedia+3*Math.sqrt((pMedia*(1-pMedia))/n);
                        Double limiteInferiorParaP = pMedia-3*Math.sqrt((pMedia*(1-pMedia))/n);
                        String datosP              = Util.obtenerDatosCsvDesdeLista(datosEnFila,tam);
                        
                        String nuevoLimInf = df.format(limiteInferiorParaP).replace(",", ".");
                        String nuevoLimSup = df.format(limiteSuperiorParaP).replace(",", ".");
                        String nuevaPMedia = df.format(pMedia).replace(",", ".");
                        
                        parametros = nuevoLimInf+" "+nuevoLimSup+" "+nuevaPMedia+" \""+datosP+"\"";
                    
                        rutaDelScript        = home_scripts+Constante.FILE_P_PY;
                        String comandoFinalP = Util.getHome()+Constante.RUTA_PYTHON27+rutaDelScript+" "+parametros;
                        comandoFinal         = comandoFinalP.replace(Constante.STR_BUILD_CLASES, Constante.STR_EMPTY);
                        
                        graficoPA = new GraficoPorAtributo();
                        graficoPA.setMediaConocida(mediaConocida);
                        graficoPorAtributo = true;
                        
                        graficoPA.setTipoGrafico(TipoGraficaEnum.P);
                        
                        //Tamaño de la muestra.
                        graficoPA.setTamanioMuestra(tam);
                        
                        graficoPA.setData(data);
                        
                        List<Double> datoss = Util.obtenerListaDoubleDesdeCsv(datosP);
                        
                        graficoPA.setDatos(datoss);
                        graficoPA.setDatosEntrada(datosEnFila);
                                                
                        graficoPA.setLimite(new Limite(limiteInferiorParaP,limiteSuperiorParaP,pMedia));
                        
                        Comando comando =  new Comando(parametros, rutaDelScript, comandoFinal);
                        
                        graficoPA.setComando(comando);
                        
                    }else{  
                        JOptionPane.showMessageDialog(null, Constante.VALIDACION_TAMANIO_MUESTRA);
                    }
                    
                }else if(this.tipoGrafica == TipoGraficaEnum.NP){
                    String tamanioMuestral = String.valueOf(this.tamMuestra);
                                        
                    if(tamanioMuestral!=null){
                        DecimalFormat df = new DecimalFormat("0.00");
                        int tam                  = Integer.valueOf(tamanioMuestral);
                        List<Double> datosEnFila = Util.getDataUnicaColumna(data);
                        Double sumatoria         = Util.sumarElementos(datosEnFila);
                                                
                        int n = datosEnFila.size();
                        Double mxn =  (double) tam * n;
                        Double division = sumatoria/mxn;
                        Double pMedia   = division;
                        
                        /** Uso de media del proceso si es conocida. */
                        if(this.mediaConocida!=null){
                            pMedia = this.mediaConocida;
                        }
                        
                        Double limiteSuperiorParaP = (tam*pMedia)+(3*Math.sqrt((tam*pMedia*(1-pMedia))));
                        Double limiteInferiorParaP = (tam*pMedia)-(3*Math.sqrt((tam*pMedia*(1-pMedia))));
                        String datosNP              = Util.obtenerDatosCsvDesdeLista(datosEnFila);
                        
                        String nuevoLimInf = df.format(limiteInferiorParaP).replace(",", ".");
                        String nuevoLimSup = df.format(limiteSuperiorParaP).replace(",", ".");
                        String nuevaPMedia = df.format(tam*pMedia).replace(",", ".");
                        
                        parametros = nuevoLimInf+" "+nuevoLimSup+" "+nuevaPMedia+" \""+datosNP+"\"";
                        
                        rutaDelScript        = home_scripts+Constante.FILE_NP_PY;
                        String comandoFinalP = Util.getHome()+Constante.RUTA_PYTHON27+rutaDelScript+" "+parametros;
                        comandoFinal         = comandoFinalP.replace(Constante.STR_BUILD_CLASES, Constante.STR_EMPTY);
                        
                        graficoPA = new GraficoPorAtributo();
                        graficoPA.setMediaConocida(mediaConocida);
                        graficoPorAtributo = true;
                        
                        graficoPA.setTipoGrafico(TipoGraficaEnum.NP);
                        
                        //Tamaño de la muestra.
                        graficoPA.setTamanioMuestra(tam);
                        
                        graficoPA.setData(data);
                        
                        List<Double> datosNPDouble = Util.obtenerListaDoubleDesdeCsv(datosNP);
                        
                        graficoPA.setDatos(datosNPDouble);
                        graficoPA.setDatosEntrada(datosEnFila);
                                                
                        graficoPA.setLimite(new Limite(limiteInferiorParaP,limiteSuperiorParaP,pMedia));
                        
                        Comando comando =  new Comando(parametros, rutaDelScript, comandoFinal);
                        
                        graficoPA.setComando(comando);
                        
                    }else{  
                        JOptionPane.showMessageDialog(null, Constante.VALIDACION_TAMANIO_MUESTRA);
                    }
                }else if(this.tipoGrafica == TipoGraficaEnum.C){
                     List<Double> datosEnFila    = Util.getDataUnicaColumna(data);
                    String datosC                = Util.obtenerDatosCsvDesdeLista(datosEnFila);
                    Double sumatoria             = Util.sumarElementos(datosEnFila);
                    Double cBarra                = sumatoria/datosEnFila.size();
                    
                    /** Uso de media del proceso si es conocida. */
                    if(this.mediaConocida!=null){
                        cBarra = this.mediaConocida;
                    }
                    
                    Double limiteControlSuperior = cBarra + 3*Math.sqrt(cBarra);
                    Double lineaCentral          = cBarra;
                    Double limiteControlInferior = cBarra - 3*Math.sqrt(cBarra);
                                        
                    parametros = limiteControlInferior+" "+limiteControlSuperior+" "+lineaCentral+" \""+datosC+"\"";
                                        
                    rutaDelScript        = home_scripts+Constante.FILE_C_PY;
                    String comandoFinalP = Util.getHome()+Constante.RUTA_PYTHON27+rutaDelScript+" "+parametros;
                    comandoFinal         = comandoFinalP.replace(Constante.STR_BUILD_CLASES, Constante.STR_EMPTY);
                    
                    graficoPA = new GraficoPorAtributo();
                    graficoPA.setMediaConocida(mediaConocida);
                    graficoPorAtributo = true;

                    graficoPA.setTipoGrafico(TipoGraficaEnum.C);

                    graficoPA.setData(data);
                    graficoPA.setDatos(datosEnFila);
                    graficoPA.setDatosEntrada(datosEnFila);

                    graficoPA.setLimite(new Limite(limiteControlInferior,limiteControlSuperior,lineaCentral));

                    Comando comando =  new Comando(parametros, rutaDelScript, comandoFinal);

                    graficoPA.setComando(comando);
                    
                }else if(this.tipoGrafica == TipoGraficaEnum.U){
                    DecimalFormat df = new DecimalFormat(Constante.STR_CERO_CERO);
                    int n = ene;
                    List<Double> datosEnFila               = Util.getDataUnicaColumna(data);
                    List<Double> disconformidadesPorUnidad = Util.getDisconformidadesPorUnidad(datosEnFila,n);
                    String datosU                          = Util.obtenerDatosCsvDesdeLista(disconformidadesPorUnidad);
                    Double sumatoria                       = Util.sumarElementos(disconformidadesPorUnidad);
                    Double uBarra                          = sumatoria/disconformidadesPorUnidad.size();
                    
                    /** Uso de media del proceso si es conocida. */
                    if(this.mediaConocida!=null){
                        uBarra = this.mediaConocida;
                    }
                    
                    Double limiteControlSuperior = uBarra + 3*Math.sqrt(uBarra/n);
                    Double lineaCentral          = uBarra;
                    Double limiteControlInferior = uBarra - 3*Math.sqrt(uBarra/n);
                    
                    String nuevoLimiteControlSuperior = df.format(limiteControlSuperior).replace(Constante.STR_COMMA_SEPARATOR, Constante.STR_PUNTO);
                    String nuevaLineaCentral          = df.format(lineaCentral).replace(Constante.STR_COMMA_SEPARATOR, Constante.STR_PUNTO);
                    String nuevolimiteControlInferior = df.format(limiteControlInferior).replace(Constante.STR_COMMA_SEPARATOR, Constante.STR_PUNTO);
                                        
                    parametros = nuevolimiteControlInferior+" "+nuevoLimiteControlSuperior+" "+nuevaLineaCentral+" \""+datosU+"\"";
                                        
                    rutaDelScript        = home_scripts+Constante.FILE_U_PY;
                    String comandoFinalP = Util.getHome()+Constante.RUTA_PYTHON27+rutaDelScript+" "+parametros;
                    comandoFinal         = comandoFinalP.replace(Constante.STR_BUILD_CLASES, Constante.STR_EMPTY);
                    
                    graficoPA = new GraficoPorAtributo();
                    graficoPA.setMediaConocida(mediaConocida);
                    graficoPorAtributo = true;

                    graficoPA.setTipoGrafico(TipoGraficaEnum.U);

                    graficoPA.setData(data);
                    graficoPA.setDatos(Util.obtenerListaDoubleDesdeCsv(datosU));
                    graficoPA.setDatosEntrada(datosEnFila);
                    graficoPA.setTamanioMuestra(n);

                    graficoPA.setLimite(new Limite(limiteControlInferior,limiteControlSuperior,lineaCentral));

                    Comando comando =  new Comando(parametros, rutaDelScript, comandoFinal);

                    graficoPA.setComando(comando);
                }
                
                //Ejecutar comando.
                try{
                    commandExecutor.ejecutarComandoSinEspera(comandoFinal);
                }catch(Exception e){
                    Util.print(e.getMessage());
                }
                
                //Gestionar Grafico por fases.
                if(graficoPorVariable){
                    gestionarGraficoPorFases(graficoPV);
                }else if(graficoPorAtributo){
                    gestionarGraficoPorFases(graficoPA);
                }
                
            }else{
                Util.print("Error, la data obtenida para generar las grafcias es nula..");
            }
            
        }catch(Exception e){
            Util.print(e.getMessage());
            JOptionPane.showMessageDialog(this,e.getMessage());
        }
    }
    
    private void gestionarGraficoPorFases(GraficoPorVariable grafico){
        List<PuntoFueraLimite> puntosFueraPrimerGrafico  = grafico.getPuntosFueraLimite();
        List<PuntoFueraLimite> puntosFueraSegundoGrafico = grafico.getPuntosFueraLimiteSegundoGrafico();
        
        String tipoGraficoPrimerGrafico  = Constante.NO_APLICA;
        String tipoGraficoSegundoGrafico = Constante.NO_APLICA;
        
        if(!puntosFueraPrimerGrafico.isEmpty() || !puntosFueraSegundoGrafico.isEmpty()){
            List<PuntoFueraLimite> puntosFuera = new ArrayList<>();
            
            switch(grafico.getTipoGrafico()){
                case X_BARRA_R:
                    tipoGraficoPrimerGrafico  = Constante.EQUIS;
                    tipoGraficoSegundoGrafico = Constante.ERRE;
                    break;
                case X_BARRA_S:
                    tipoGraficoPrimerGrafico  = Constante.EQUIS;
                    tipoGraficoSegundoGrafico = Constante.ESE;
                    break;
                case X_M_R:
                    tipoGraficoPrimerGrafico  = Constante.EQUIS;
                    tipoGraficoSegundoGrafico = Constante.EME_ERRE;
                    break;
            }
            
            for(PuntoFueraLimite punto : puntosFueraPrimerGrafico){
                punto.setTipoGrafico(tipoGraficoPrimerGrafico);
                puntosFuera.add(punto);
            }
            
            if(grafico.getTipoGrafico()!=TipoGraficaEnum.X_M_R){
                for(PuntoFueraLimite punto : puntosFueraSegundoGrafico){
                    punto.setTipoGrafico(tipoGraficoSegundoGrafico);
                    puntosFuera.add(punto);
                }
            }
            mostrarPuntosFueraYEliminar(grafico,puntosFuera);
        }
    }
    
    private void gestionarGraficoPorFases(GraficoPorAtributo grafico){
      System.out.println("INI-gestionarGraficoPorFases(GraficoPorAtributo grafico)");
        List<PuntoFueraLimite> puntosFueraGrafico = grafico.getPuntosFueraLimite();
        
        String tipoGraficoStr  = Constante.NO_APLICA;
        
        if(!puntosFueraGrafico.isEmpty()){
          
          List<PuntoFueraLimite> puntosFuera = new ArrayList<>();
          
          switch(grafico.getTipoGrafico()){
              case P:
                  tipoGraficoStr  = Constante.PE;
                  break;
              case NP:
                  tipoGraficoStr  = Constante.ENE_PE;
                  break;
              case C:
                  tipoGraficoStr  = Constante.SE;
                  break;
              case U:
                  tipoGraficoStr  = Constante.UU;
                  break;
          }
          
          for(PuntoFueraLimite punto : puntosFueraGrafico){
              punto.setTipoGrafico(tipoGraficoStr);
              puntosFuera.add(punto);
          }
          mostrarPuntosFueraYEliminar(grafico,puntosFuera);
        }
    }
    
    private void mostrarPuntosFueraYEliminar(GraficoPorVariable grafico,List<PuntoFueraLimite> puntosMostrar){
        final String mensaje = Constante.MENSAJE_PUNTOS_FUERA_DE_LIMITES.replace("{}", String.valueOf(puntosMostrar.size()));
        final int resultado  = JOptionPane.showConfirmDialog(this,mensaje, Constante.TITLE_PUNTOS_FUERA, JOptionPane.YES_NO_OPTION);
        
        switch(resultado){
            case 0:
                VentanaPuntosFueraDeControl ventanaPuntosFueraDeControl = null;
                ventanaPuntosFueraDeControl = new VentanaPuntosFueraDeControl(grafico,puntosMostrar);
                ventanaPuntosFueraDeControl.setTitle(Constante.TITLE_PUNTOS_FUERA);
                ventanaPuntosFueraDeControl.setResizable(false);
                ventanaPuntosFueraDeControl.setLocationRelativeTo(null);
                ventanaPuntosFueraDeControl.setVisible(true);
                break;
            case 1:
                break;
            case 2:
                break;
        }
    }
    
    private void mostrarPuntosFueraYEliminar(GraficoPorAtributo grafico,List<PuntoFueraLimite> puntosMostrar){
        final String mensaje = Constante.MENSAJE_PUNTOS_FUERA_DE_LIMITES.replace("{}", String.valueOf(puntosMostrar.size()));
        final int resultado  = JOptionPane.showConfirmDialog(this,mensaje, Constante.TITLE_PUNTOS_FUERA, JOptionPane.YES_NO_OPTION);
        
        switch(resultado){
            case 0:
                VentanaPuntosFueraDeControl ventanaPuntosFueraDeControl = null;
                ventanaPuntosFueraDeControl = new VentanaPuntosFueraDeControl(grafico,puntosMostrar);
                ventanaPuntosFueraDeControl.setTitle(Constante.TITLE_PUNTOS_FUERA);
                ventanaPuntosFueraDeControl.setResizable(false);
                ventanaPuntosFueraDeControl.setLocationRelativeTo(null);
                ventanaPuntosFueraDeControl.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                ventanaPuntosFueraDeControl.setVisible(true);
                break;
            case 1:
                break;
            case 2:
                break;
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_crearTabla;
    private javax.swing.JButton jButton_graficar;
    private javax.swing.JButton jButton_limpiarCampos;
    private javax.swing.JLabel jLabel_cantidad_datos;
    private javax.swing.JLabel jLabel_tamMuestra;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable_tablaIngresoDatos;
    private javax.swing.JTextField jTextField_cantidadDatos;
    private javax.swing.JTextField jTextField_tamanioMuestra;
    // End of variables declaration//GEN-END:variables
}
